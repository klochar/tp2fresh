/*
 * Ecole Polytechnique Montreal - GIGL
 * Automne 2024
 * answers.txt
 * Ghobrial, Mina Youhanna Helmi / 2214988
 * Rouabah, Abdelmounaim / 2211513
*/


1.Supposez que vous faites passer le nombre de processus de N à N + δ, où N correspond au nombre de
coeurs disponibles. Quel sera l’impact de ce changement sur la performance de l’algorithme?

 Si on augmente N+delta on aura pour effect d augmenter le nombre de processus et 
donc augmenter la charge sur le cpu car on excede le nombre de cores du cpu et donc le processus va devoir attendre pour une prenre une ressource.
Prenons pour un array de size 10 avec N processus(je laisserai seulement pour N=1 les demarches de array no sorted et sorted):
ce test a ete fait sur ma machine virtuel pour ce numero (1 cores et 2 threads) :
  Nom de modèle :                         Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz
    Famille de processeur :               6
    Modèle :                              85
    Thread(s) par cœur :                  2
    Cœur(s) par socket :                  1


1.Générez des résultats de temps d’éxécution de votre algorithme parallèle et de l’algorithme initial.
Assurez-vous que les résultats soient représentatifs de la réalité, sinon vos réponses aux questions suiv-
antes ne seront pas évaluées. Vous devez générer des résultats pour les valeurs suivantes du nombre N
de processus, 

N=1:
Array size: 10
Number of processes: 1
Segment size: 10
NO SORTED array: 120419 145829 808586 323553 845553 900184 323437 670032 850245 225670 
Sorted array: 120419 145829 225670 323437 323553 670032 808586 845553 850245 900184 
Temps d'exec du tri : 0 secondes et 602 microsecondes

N=4
Array size: 10
Number of processes: 4
Segment size: 2
Temps d'exec du tri : 0 secondes et 1654 microsecondes

N=8
Array size: 10
Number of processes: 8
Segment size: 1
Temps d'exec du tri : 0 secondes et 2530 microsecondes

N=16
Array size: 10
Number of processes: 16
Segment size: 0
Temps d'exec du tri : 0 secondes et 5702 microsecondes

donc on voit que losqu'on augmente le nombre de processus, cela affecte le temps et donc reduit les performances

2. Dans ce cas, il est tres difficile de voir une amelioration car le CPU que j'utilise est de 1 cores et donc c'est pour cela qu'il est tres desavantageux de faire avec plusieurs processus,
    le programme avec la version parallele est beaucoup plus lente a mesure qu'on augmente le nombre de processus N.

3. oui puisque pour un array de size plus petit, la synchronisation est meilleur que le parallelisme, alors qu un array de size plus grand, le parallelisme est meilleur et plus performant.

4.  AVANT DE COMMENTER LOG 
    Array size: 20
    Number of processes: 2
    Segment size: 10
    Temps d'exec du tri : 0 secondes et 11896 microsecondes

    APRES DE COMMENTER LOG 
    Array size: 20
    Number of processes: 2
    Segment size: 10
    Temps d'exec du tri : 0 secondes et 6608 microsecondes

    on a donc environ un gain de 50% de temps en mettant en commantaire le code de journalisation, et si l'on fait plusieurs autres test, on remarque que pour un N plus grand, il y aura une amelioration plus importante.
    plus techniquement, La complexite de write_array_into_file est de O(n) a cause du for loop et la complexite de time_sort est O(1) (que des affectations), donc le fait de commenter write_array_into_file aura un impact lineaire.


5.  En premier lieu, ,serait d allouer la memoire de facon dynamique de facon si on utilise pas un grand nombre de memoire, alors on allouera moins d esspace, mais certes, l allocation dynamique est plus lourde en general
    
    une deuxieme facon, on pourrait faire des threads a la place des processus, memoire est already partage par les threads et pas besoin de mmap

    Lorsque N=1 on ne tire pas avantage du multithreading (car 1 seul thread), donc le temps est desatantageux et meme plus desavantageux sans thread car il y a une gestion des threads
    LORSQUE N=4 on a que le updated est 1,70 fois plus rapide
    LORSQUE N=8 on a que le updated est 1,20 fois plus rapide
    LORSQUE N=16 on voit que l'on prend plus de temps car on depasse le nombre de cores du cpu (qui est de 14 cores), donc au dela de la limite, l'ajout de threads ne permettra pas de gagner du temps

    ces resultats sont calcule a partir des temps obtenu ci dessous

j utilise les PC de polytechnique pour ce numero (14cores)
SOIT A merge_sort NON-AMELIORER et B merge_sort AMELIORER (multithreading) 

N:1
A:Array size: 25
Number of processes: 1
Segment size: 25
Temps d'exec du tri : 0 secondes et 8511 microsecondes
B:Array size: 25
Number of threads: 1
Segment size: 25
Temps d'exec du tri : 0 secondes et 22271 microsecondes

N:4
A:Array size: 25
Number of processes: 4
Segment size: 6
Temps d'exec du tri : 0 secondes et 17169 microsecondes
B:Array size: 25
Number of threads: 4
Segment size: 6
Temps d'exec du tri : 0 secondes et 10109 microsecondes

N:8
A:Array size: 25
Number of processes: 8
Segment size: 3
Temps d'exec du tri : 0 secondes et 21254 microsecondes
B:Array size: 25
Number of threads: 8
Segment size: 3
Temps d'exec du tri : 0 secondes et 17654 microsecondes

ICI A CAUSE DU CPU 14(CORES) on a des performaces qui sont moindres 
N:16
A:Array size: 25
Number of processes: 16
Segment size: 1
Temps d'exec du tri : 0 secondes et 26634 microsecondes
B:Array size: 25
Number of threads: 16
Segment size: 1
Temps d'exec du tri : 0 secondes et 28361 microsecondes

